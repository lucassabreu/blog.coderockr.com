<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coderockr Culture on Blog Coderockr</title>
    <link>https://blog.coderockr.com/categories/coderockr-culture/</link>
    <description>Recent content in Coderockr Culture on Blog Coderockr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Mon, 13 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.coderockr.com/categories/coderockr-culture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Boas Práticas na Criação de Milestones, Tarefas, Pull Requests e Commits</title>
      <link>https://blog.coderockr.com/posts/2017/boas-praticas-na-criacao-de-milestones-tarefas-pull-requests-e-commits/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/boas-praticas-na-criacao-de-milestones-tarefas-pull-requests-e-commits/</guid>
      <description>Um dos fatores de sucesso do processo de desenvolvimento de software, assim como a maioria dos empreendimentos humanos, é uma boa comunicação.
A Gitlab, ao cunhar o termo Conversational Development foi muito feliz ao definir
 ConvDev takes a different approach by constraining the agile principles to what’s at the center of getting work done, the conversation.
 Neste post vou citar algumas práticas que estamos implementando e que vem melhorando nossos processos.</description>
    </item>
    
    <item>
      <title>Modelando Sistemas Usando Event Storming</title>
      <link>https://blog.coderockr.com/posts/2017/modelando-sistemas-usando-event-storming/</link>
      <pubDate>Wed, 11 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/modelando-sistemas-usando-event-storming/</guid>
      <description>Mão na massa!
O desenvolvimento de software envolve muito mais do que escrever códigos. O objetivo maior é desenvolver o software correto, que resolva as necessidades do usuários e com a máxima qualidade.
Parte deste desafio é aumentar o entendimento do negócio e dos problemas que estão sendo resolvidos, por todos os envolvidos no projeto.
Existem varias formas de realizar este levantamento de requisitos, desde as mais tradicionais até ideias modernas.</description>
    </item>
    
    <item>
      <title>Time Tracking na Linha de Comando</title>
      <link>https://blog.coderockr.com/posts/2017/time-tracking-na-linha-de-comando/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/time-tracking-na-linha-de-comando/</guid>
      <description>Escrevi um post algum tempo atrás falando sobre as armadilhas do “multitasking” no nosso dia a dia. Uma das minhas sugestões no post foi usar uma ferramenta para anotar as horas e tarefas, o que ajuda a manter o foco em uma coisa de cada vez. Neste post vou apresentar uma nova ferramenta que estou usando e gostando bastante, o Watson.
Eu passo a maior parte do meu tempo na frente do computador com um terminal aberto.</description>
    </item>
    
    <item>
      <title>Por que não Temos Equipes Remotas na Coderockr</title>
      <link>https://blog.coderockr.com/posts/2017/por-que-nao-temos-equipes-remotas-na-coderockr/</link>
      <pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/por-que-nao-temos-equipes-remotas-na-coderockr/</guid>
      <description>Recentemente lançamos nosso plano de carreiras e no Twitter o grande @femontanha levantou um ponto interessante:
Como é um assunto relevante achei legal escrever um post explicando os motivos de não termos equipes remotas na Coderockr. São dois fatores, que vou chamar de “Fator Matemática” e “Fator Pessoas”.
O Fator Matemática Atualmente a Coderockr é uma empresa de serviços então, resumidamente, o que entregamos são horas de desenvolvimento. O valor/hora que cobramos precisa ser competitivo com o mercado e também cobrir todos os custos da empresa.</description>
    </item>
    
    <item>
      <title>O Plano de Carreiras da Coderockr</title>
      <link>https://blog.coderockr.com/posts/2017/o-plano-de-carreiras-da-coderockr/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/o-plano-de-carreiras-da-coderockr/</guid>
      <description>O que é um plano de carreira?
Citando a definição neste ótimo post publicado no site da Endeavor:
 Plano de carreira é um programa estruturado que estipula o caminho que cada funcionário vai percorrer dentro de uma organização. Ele determina as competências necessárias para cada posição hierárquica e também qual é a expectativa da empresa em relação àquela posição.
 Porque criar um plano? A Coderockr está fazendo sete anos de existência em 2017 e durante estes anos pudemos acompanhar algumas histórias de pessoas trabalhando conosco e seguindo novas jornadas.</description>
    </item>
    
    <item>
      <title>Como Montar um Bom Currículo para Desenvolvedores e Designers</title>
      <link>https://blog.coderockr.com/posts/2017/como-montar-um-bom-curriculo-para-desenvolvedores-e-designers/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/como-montar-um-bom-curriculo-para-desenvolvedores-e-designers/</guid>
      <description>Desde 2010, quando fundamos a Coderockr, uma das tarefas mais difíceis e importantes que eu tenho realizado é a contratação de pessoas. Neste post gostaria de compartilhar algumas ideias que podem ajudar na escrita de um currículo para desenvolvedores e designers.
Vamos lá…
Com o passar do tempo nós fomos evoluindo nosso processo e atualmente ele é formado por quatro etapas: &amp;gt; leitura de currículos -&amp;gt; entrevista -&amp;gt; teste técnico -&amp;gt; entrevista com a equipe.</description>
    </item>
    
    <item>
      <title>Dois Anos de Coderockr</title>
      <link>https://blog.coderockr.com/posts/2017/dois-anos-de-coderockr/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/dois-anos-de-coderockr/</guid>
      <description>Este mês, estou completando oficialmente dois anos trabalhando para a Coderockr, e através desse post, gostaria de trazer um overview desta experiência.
Antes de entrar na Coderockr eu trabalhava em uma agência digital, desenvolvendo hotsites e sites constitucionais, projetos que deveriam ficar prontos dentro de duas semanas e que tinham um orçamento baixo. Naquela época, eu já acompanhava muito a comunidade de desenvolvimento e todas as tecnologias e boas práticas que estavam sendo adotadas e nas minhas horas vagas eu tirava um tempo para estudá-las.</description>
    </item>
    
    <item>
      <title>Culture Code da Coderockr</title>
      <link>https://blog.coderockr.com/posts/2017/culture-code-da-coderockr/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/culture-code-da-coderockr/</guid>
      <description>Hoje é um dia importante para nós da Coderockr pois estamos tornando público nosso Culture Code.
Essa é uma prática que se tornou famosa desde que a Netflix publicou o seu em 2009 e desde então várias empresas fizeram o mesmo.
Citando o post da Resultados Digitais sobre o assunto:
 Culture Code é um documento que serve para uma série de coisas: um guia para os colaboradores da empresa, um material para atração de novas pessoas para o time, critérios de seleção e avaliação de desempenho, um norte para onde queremos evoluir com as nossas práticas no dia a dia e em última instância até como um “manifesto” de como achamos que o trabalho deveria ser na maioria dos lugares.</description>
    </item>
    
    <item>
      <title>Por que o Planrockr é uma Single Page Application?</title>
      <link>https://blog.coderockr.com/posts/2016/por-que-o-planrockr-e-uma-single-page-application/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/por-que-o-planrockr-e-uma-single-page-application/</guid>
      <description>Há uns dias atrás, foi feita uma pergunta para a equipe do Planrockr no twitter:
@eminetto qual foi o fator determinante pro Planrockr ser uma SPA e não uma app tradicional? =)
&amp;mdash; Pedro Costa (@plcosta) October 14, 2016  
Esse é um assunto interessante a ser abordado: Quando uma aplicação deve ou não ser uma SPA? Nesse artigo não pretendo fazer menção a nenhum framework em específico, mas nos manter focados nas vantagens e desvantagens deste tipo de arquitetura.</description>
    </item>
    
    <item>
      <title>A Importância do Propósito</title>
      <link>https://blog.coderockr.com/posts/2016/a-importancia-do-proposito/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/a-importancia-do-proposito/</guid>
      <description>Nos últimos anos o Brasil viu um crescimento do número de novas empresas, sejam mais &amp;ldquo;tradicionais&amp;rdquo; ou &amp;ldquo;startups&amp;rdquo;. E eu me encaixo nessa nova onda de empreendedores, mesmo com minha formação de cientista da computação. Talvez por eu não ter uma formação empreendedora mais tradicional eu demorei alguns anos para perceber que não é perda de tempo parar um pouco e pensar em coisas importantes como &amp;ldquo;missão, visão, valores&amp;rdquo;, e o que eu acho ainda mais útil: o propósito da empresa.</description>
    </item>
    
    <item>
      <title>Como Usamos o Slack na Coderockr</title>
      <link>https://blog.coderockr.com/posts/2016/como-usamos-o-slack-na-coderockr/</link>
      <pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/como-usamos-o-slack-na-coderockr/</guid>
      <description>Dentre os valores da Coderockr estão dois pontos importantes: cooperação e transparência. Como somos uma empresa que desenvolve software nada mais esperado do que usarmos aplicativos para ajudar nestes objetivos. E hoje a principal ferramenta para isso é o Slack, que rapidamente tornou-se o coração de muitas empresas
Nós usamos o Slack como o nosso canal de comunicação, tanto entre as equipes quanto com os clientes. Cada projeto recebe um canal específico, como no exemplo abaixo:</description>
    </item>
    
    <item>
      <title>Developer Experience na Prática</title>
      <link>https://blog.coderockr.com/posts/2016/developer-experience-na-pratica/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/developer-experience-na-pratica/</guid>
      <description>No post anterior eu falei sobre a ideia do DX e como implementar algo similar em nossas empresas. Neste post quero comentar um exemplo prático comparando duas empresas similares.
Quando o Stripe foi lançado nos EUA o mercado de gateways de pagamento já estava consolidado, com grandes players como o Paypal. Nestes cenários a única forma de uma nova empresa se destacar é criando uma “vantagem competitiva” em relação aos outros concorrentes.</description>
    </item>
    
    <item>
      <title>Como Melhorar seus Códigos Usando Object Calisthenics</title>
      <link>https://blog.coderockr.com/posts/2016/como-melhorar-seus-codigos-usando-object-calisthenics/</link>
      <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/como-melhorar-seus-codigos-usando-object-calisthenics/</guid>
      <description>Em um dos primeiros projetos que a Coderockr participou tivemos o privilégio de trabalhar com um “dream team”: Eduardo Shiota, Guilherme Blanco, Rafael Dohms e Otavio Ferreira (em ordem alfabética porque é impossível perfilá-los em qualquer ordem de relevância).
Neste projeto foi possível aprimorarmos vários pontos importantes como TDD, Scrum, trabalho remoto, análise, integração contínua, etc. Mas o que mais me marcou foram os conceitos de Clean Code e Object Calisthenics que eram aplicados ao projeto.</description>
    </item>
    
    <item>
      <title>DX — Developer Experience</title>
      <link>https://blog.coderockr.com/posts/2016/dx-developer-experience/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/dx-developer-experience/</guid>
      <description>Depois de algumas cervejas e várias horas de conversa (ou teriam sido várias cervejas e algumas horas de conversa?), eis que o Guilherme Siquinelli cunha o termo que dá título a este post.
E este termo faz muito sentido. Nos últimos anos a disciplina de UX — User Experience — provou-se muito importante, desde projetos de aplicativos até e-commerce e sistemas bancários. Tornar um sistema fácil e amigável aos seus usuários é um grande passo para o seu sucesso.</description>
    </item>
    
    <item>
      <title>Estimativa Baseada em Evidências</title>
      <link>https://blog.coderockr.com/posts/2016/estimativa-baseada-em-evidencias/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/estimativa-baseada-em-evidencias/</guid>
      <description>As pessoas, salvo alguns místicos, não são muito boas em prever o futuro.
https://www.flickr.com/photos/pasukaru76/3998273279/
Portanto é bem provável que as suas estimativas de entregas de tarefas e projetos não sejam tão precisas quanto seu cliente espera, certo? Felizmente temos outros recursos a nossa disposição para suprir essa nossa deficiência: fatos, números e computadores rápidos o suficiente para processá-las.
Vamos fazer uma simples &amp;ldquo;conta de padaria&amp;rdquo; e imaginar o seguinte cenário:</description>
    </item>
    
    <item>
      <title>Gerando documentação de APIs</title>
      <link>https://blog.coderockr.com/posts/2016/gerando-documentacao-de-apis/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/gerando-documentacao-de-apis/</guid>
      <description>Uma das melhores decisões técnicas que tomei na minha carreira foi investir pesado nas arquiteturas baseadas em serviços. Meu primeiro post sobre isso data de 2011 e desde então esta decisão só se provou um acerto.
Uma das tarefas mais importantes, e chatas, é manter a documentação das APIs sempre atualizadas pois elas são consumidas por cada vez mais camadas: frontend, mobile, outros serviços e sistemas. Existem várias ferramentas para esta tarefa, sendo uma das mais completas, e complexas, o Swagger, além de alguns serviços pagos.</description>
    </item>
    
    <item>
      <title>Nossas Experiências com Mentoria na Coderockr</title>
      <link>https://blog.coderockr.com/posts/2016/nossas-experiencias-com-mentoria-na-coderockr/</link>
      <pubDate>Fri, 01 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/nossas-experiencias-com-mentoria-na-coderockr/</guid>
      <description>Quero neste post compartilhar uma experiência que estamos fazendo na Coderockr nos últimos meses: um processo de mentorias.
A motivação Como quase todas as iniciativas humanas esta também começou com uma motivação egoísta: eu quero que a Coderockr seja uma empresa cada vez melhor e mais relevante. Em algum post que eu li algum tempo atrás eu encontrei algo que acho bem importante. Trata-se de uma lista de quatro formas para uma empresa de serviços como a Coderockr crescer:</description>
    </item>
    
    <item>
      <title>Por que Ir a Eventos?</title>
      <link>https://blog.coderockr.com/posts/2016/por-que-ir-a-eventos/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/por-que-ir-a-eventos/</guid>
      <description>Algumas pessoas me perguntam se vale a pena ir em eventos e neste post quero citar alguns motivos pelos quais acredito que isso é um dos melhores investimentos que você pode fazer para sua carreira.
Conhecimento. Apesar de termos todo conhecimento necessário para resolver qualquer problema ao acesso de uma busca no Google, ir a eventos trás um outro tipo de informação. Assistindo as palestras, conversando com as pessoas nos corredores você consegue adquirir algo que não está tão facilmente disponível na internet: a experiência das pessoas.</description>
    </item>
    
    <item>
      <title>Relógios, Carros e Teste de Software</title>
      <link>https://blog.coderockr.com/posts/2016/relogios-carros-e-teste-de-software/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/relogios-carros-e-teste-de-software/</guid>
      <description>Recentemente comprei um relógio de pulso. Usar um relógio analógico em 2016 é basicamente uma decisão de estética e não de funcionalidade pois estamos rodeados de relógios digitais, como por exemplo, no painel do meu carro.
O interessante é que o relógio do meu carro vive atrasando, enquanto que o relógio de pulso nunca apresentou esse problema, apesar do relógio ter custado muito menos do que o veículo. O ponto é que para o relógio a funcionalidade “mostrar as horas” é a coisa mais importante, enquanto que para o carro isso é um extra.</description>
    </item>
    
    <item>
      <title>Se eu Soubesse aos 18  —  Profissão</title>
      <link>https://blog.coderockr.com/posts/2015/se-eu-soubesse-aos-18/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/se-eu-soubesse-aos-18/</guid>
      <description>Há 9 meses atrás escrevi um post semelhante falando sobre a faculdade, nele eu prometi escrever um post abordando o tema profissão, e aqui estou, cumprindo com a promessa; Antes tarde do que nunca.
A intensão desse post não é falar nenhuma verdade absoluta ou mostrar um caminho definitivo para o sucesso profissional, e sim, apenas relatar um pouco da experiência que tive nesses quatro anos trabalhando com web, e contribuir com algumas dicas que acredito que teriam sido úteis la no início.</description>
    </item>
    
    <item>
      <title>Coderockr Way</title>
      <link>https://blog.coderockr.com/posts/2015/coderockr-way/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/coderockr-way/</guid>
      <description>Toda empresa tem sua forma de trabalhar, sua caixa de ferramentas. Nestes cinco anos aprendemos bastante e queremos compartilhar esse conhecimento, por isso vamos criar uma série de pequenos vídeos sobre o nosso processo e as ferramentas que usamos.
O primeiro já está no nosso canal do Youtube, falando sobre a forma como vemos projetos de software. Nossa ideia inicial é fazer um vídeo para cada tópico do mapa mental:</description>
    </item>
    
    <item>
      <title>Como Gerenciamos Projetos na Coderockr</title>
      <link>https://blog.coderockr.com/posts/2015/como-gerenciamos-projetos-na-coderockr/</link>
      <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/como-gerenciamos-projetos-na-coderockr/</guid>
      <description>A Coderockr é, simplificando bastante, uma empresa de projetos de software. Para conseguirmos cumprir nosso propósito precisamos gerenciar projetos com qualidade e eficiência. Neste post vamos comentar como fazemos isso.
Metodologia Desde o nascimento da Coderockr sempre tivemos como foco o uso de metodologias ágeis, principalmente devido a natureza dos projetos e dos clientes que atendemos, que precisam responder rápido a mudanças. Após muito estudo e experiências chegamos a conclusão que a melhor metodologia para nossos projetos é o Kanban.</description>
    </item>
    
    <item>
      <title>A Importância da Revisão de Código</title>
      <link>https://blog.coderockr.com/posts/2015/a-importancia-da-revisao-de-codigo/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/a-importancia-da-revisao-de-codigo/</guid>
      <description>Em seu famoso artigo “A catedral e o bazar” Eric S. Raymond proferiu:
 Dados olhos suficientes, todos os erros são óbvios
 Esta frase, que ficou conhecida com a “Lei de Linus”, resume bem o fenômeno do código aberto e como ele mudou a forma como desenvolvemos software.
Na Coderockr adotamos a política de Code Review em todos os projetos. Para cada tarefa/melhoria/bug/feature o desenvolvedor cria uma nova branch no Bitbucket (ou Github se o projeto for open source) e ao final do desenvolvimento ele abre um Pull Request para que os outros membros da equipe ajudem a analisar o código.</description>
    </item>
    
    <item>
      <title>O Propósito da Coderockr</title>
      <link>https://blog.coderockr.com/posts/2015/o-proposito-da-coderockr/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/o-proposito-da-coderockr/</guid>
      <description>Em seu célebre TED Talk Simon Sinek nos apresenta o que ele chamou de &amp;ldquo;golden circle&amp;rdquo; onde mostra a importância das empresas terem foco no &amp;ldquo;por quê&amp;rdquo; mais do que no &amp;ldquo;como&amp;rdquo; ou &amp;ldquo;o que&amp;rdquo; fazem.
Inspirado neste conceito e no projeto /purpose criamos esta página para compartilhar nossa visão de mundo, nossos propósitos.
 Nosso propósito é criar softwares incríveis e ajudar outras empresas a fazerem o mesmo. Fazemos isso porque acreditamos que o desenvolvimento de software é uma arte, que deve ser feita com paixão e dedicação.</description>
    </item>
    
    <item>
      <title>Sintomas de Design de Software Podre</title>
      <link>https://blog.coderockr.com/posts/2015/sintomas-de-design-de-software-podre/</link>
      <pubDate>Thu, 07 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/sintomas-de-design-de-software-podre/</guid>
      <description>Existem quatro sintomas primários que nos ajudam a identificar quando nosso design está apodrecendo. São ortogonais, mas relacionados de formas óbvias. Os sintomas são: rigidez, fragilidade, imobilidade, e viscosidade.
Rigidez É a tendência do software ser difícil de mudar, mesmo que de maneira simples. Cada mudança causa uma cascata de mudanças subsequentes em módulos independentes. O que começa como uma simples mudança de dois dias em um módulo cresce em uma maratona de mudanças de várias semanas alterando módulo atrás de módulo.</description>
    </item>
    
    <item>
      <title>Os 12 Fatores: Uma Metodologia para Criação de Projetos SaaS</title>
      <link>https://blog.coderockr.com/posts/2015/os-12-fatores-uma-metodologia-para-criacao-de-projetos-saas/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/os-12-fatores-uma-metodologia-para-criacao-de-projetos-saas/</guid>
      <description>Todo desenvolvedor já deve ter ouvido falar do Heroku, plataforma de cloud computing que revolucionou o desenvolvimento, ajudou a criar o movimento “devops” e que foi vendida por diversos milhares de dólares para a Salesforce. Se tem algo que eles tem muita experiência é na criação e suporte de aplicativos SaaS (software-as-a-service), principalmente aplicativos web.
Eles usaram toda essa experiência para criar o 12factor que é uma espécie de “manifesto” com os 12 fatores que uma aplicação deveria seguir para ter sucesso nesse formato.</description>
    </item>
    
    <item>
      <title>Se as Empresas Fossem Bandas de Rock</title>
      <link>https://blog.coderockr.com/posts/2015/se-as-empresas-fossem-bandas-de-rock/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/se-as-empresas-fossem-bandas-de-rock/</guid>
      <description>Um dos motes da Coderockr é “Bons programadores são únicos, assim como estrelas no mundo do rock”. Nesse post vou aumentar um pouco as analogias, envolvendo outras áreas das empresas.
O Manager O Manager é a pessoa que negocia os shows, que assina os contratos da banda com gravadoras, que vende os direitos autorais das músicas. Os Beatles não seriam ninguém sem o Brian Epstein fazer sua parte e colocá-los em grandes contratos.</description>
    </item>
    
    <item>
      <title>Multitasking Só é Bom no seu Computador</title>
      <link>https://blog.coderockr.com/posts/2014/multitasking-so-e-bom-no-seu-computador/</link>
      <pubDate>Thu, 27 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2014/multitasking-so-e-bom-no-seu-computador/</guid>
      <description>Recentemente a Coderockr conquistou alguns clientes no formato “banco de horas”. Isto significa que o cliente compra um número de horas de nossa experiência e trabalho, então precisamos ter alguma forma de contabilizar como estamos usando nossos dias.
Confesso que no começo achei que iria ser bem chato anotar as minhas atividades e anotar quantas horas estou trabalhando em cada projeto. Mas já no segundo dia eu me apaixonei pelo processo e isso se tornou um vício.</description>
    </item>
    
    <item>
      <title>Carreira, e não Emprego</title>
      <link>https://blog.coderockr.com/posts/2013/carreira-e-nao-emprego/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2013/carreira-e-nao-emprego/</guid>
      <description>A ideia para este post surgiu de duas situações. A primeira foi o fato de que com os cursos básicos de programação que estamos publicando no Code Squad (logica e php) estou recebendo mais e-mails de pessoas que estão entrando agora na profissão de programador, com aquelas dúvidas que eu também tive no início.
A segunda motivação foi uma das ótimas conversas geradas em intervalos de palestras em um evento de desenvolvedores que participei (você precisa participar destes eventos!</description>
    </item>
    
    <item>
      <title>Programador Dave Grohl e Não Axl Rose</title>
      <link>https://blog.coderockr.com/posts/2013/programador-dave-grohl-e-nao-axl-rose/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2013/programador-dave-grohl-e-nao-axl-rose/</guid>
      <description>O lema da Coderockr é “Programadores são artistas, são Rockstars!”. Esse termo “programador rockstar” vem sendo usado por algumas pessoas como pejorativo, como algo a ser evitado.
O CEO da Netguru fez uma ótima apresentação com o título “Why no one is looking for ‘rockstar programmers”.
Traduzi/adaptei os trechos mais importantes:
 Seja um programador sem ego. Lembre que você não é o seu código. A única forma de melhorar é estar aberto para ao feedback dos outros e dar feedbacks honestos e sem julgamentos.</description>
    </item>
    
  </channel>
</rss>