<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ferramentas on Blog Coderockr</title>
    <link>https://blog.coderockr.com/tags/ferramentas/</link>
    <description>Recent content in Ferramentas on Blog Coderockr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Wed, 06 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.coderockr.com/tags/ferramentas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simplificando Ainda Mais o Setup de Projetos</title>
      <link>https://blog.coderockr.com/posts/2018/simplificando-ainda-mais-o-setup-de-projetos/</link>
      <pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2018/simplificando-ainda-mais-o-setup-de-projetos/</guid>
      <description>Simplificando ainda mais o Setup de Projetos Agora simplificando GitHub, GitLab e Trello
English version: click here
Ano passado nós criamos um script simples para auxiliar no setup de projetos no GitHub, ele atendeu bem as nossas necessidades para os novos repositórios que criamos no GitHub.
Porém também trabalhamos com outras ferramentas para gerir os nossos projetos, como o GitLab e o Trello, mas não fizemos um script semelhante para eles.</description>
    </item>
    
    <item>
      <title>Simplifying Project Setup on GitHub</title>
      <link>https://blog.coderockr.com/posts/2018/simplifying-project-setup-on-github/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2018/simplifying-project-setup-on-github/</guid>
      <description>At Coderockr we start and take on many projects, either for clients that hire us or for internal actions, and usually GitHub ends up being the tool we choose for them.
Over the years we ended up defining a structure to control our issues, using the following labels:
Labels set used on Coderockr Way
It is a very simple set, but it makes all the steps, priorities, types and states of the tasks clear, and becomes very easy to understand what is happening.</description>
    </item>
    
    <item>
      <title>Simplifying Project Setup Even Further</title>
      <link>https://blog.coderockr.com/posts/2018/simplifying-project-setup-even-further/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2018/simplifying-project-setup-even-further/</guid>
      <description>Now simplifying GitHub, GitLab and Trello
Em português clique aqui
Last year we created a simple script to assist in the setup of projects in GitHub, it met our needs well for the new repositories we created in GitHub.
We also worked with other tools to manage our projects, like GitLab and Trello, but we did not do a similar script for them.
At the beginning of the year, I created a new script to perform the project setup in GitLab, which is basically a copy of the first script, but with the GitLab endpoints.</description>
    </item>
    
    <item>
      <title>Boas Práticas na Criação de Milestones, Tarefas, Pull Requests e Commits</title>
      <link>https://blog.coderockr.com/posts/2017/boas-praticas-na-criacao-de-milestones-tarefas-pull-requests-e-commits/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/boas-praticas-na-criacao-de-milestones-tarefas-pull-requests-e-commits/</guid>
      <description>Um dos fatores de sucesso do processo de desenvolvimento de software, assim como a maioria dos empreendimentos humanos, é uma boa comunicação.
A Gitlab, ao cunhar o termo Conversational Development foi muito feliz ao definir
 ConvDev takes a different approach by constraining the agile principles to what’s at the center of getting work done, the conversation.
 Neste post vou citar algumas práticas que estamos implementando e que vem melhorando nossos processos.</description>
    </item>
    
    <item>
      <title>Time Tracking na Linha de Comando</title>
      <link>https://blog.coderockr.com/posts/2017/time-tracking-na-linha-de-comando/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/time-tracking-na-linha-de-comando/</guid>
      <description>Escrevi um post algum tempo atrás falando sobre as armadilhas do “multitasking” no nosso dia a dia. Uma das minhas sugestões no post foi usar uma ferramenta para anotar as horas e tarefas, o que ajuda a manter o foco em uma coisa de cada vez. Neste post vou apresentar uma nova ferramenta que estou usando e gostando bastante, o Watson.
Eu passo a maior parte do meu tempo na frente do computador com um terminal aberto.</description>
    </item>
    
    <item>
      <title>Gerenciando Dependências em Golang</title>
      <link>https://blog.coderockr.com/posts/2017/gerenciando-dependencias-em-golang/</link>
      <pubDate>Thu, 27 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/gerenciando-dependencias-em-golang/</guid>
      <description>Gerenciando dependências em Golang Desenvolver software atualmente se parece cada vez mais com montar um quebra-cabeça. Foi-se o tempo dos grandes frameworks, com várias funcionalidades acopladas, e é muito comum usarmos vários pequenos pacotes para montarmos nossos projetos.
A maioria das linguagens de programação modernas possui um sistema de gerenciamento destas dependências, como o Composer do PHP, o yarn/npm para JavaScript, pip no Python, etc. No ecossistema Go existem várias implementações deste conceito, o que acabou gerando um certo conflito na hora de selecionar uma solução.</description>
    </item>
    
    <item>
      <title>Definindo APIs com o API Blueprint</title>
      <link>https://blog.coderockr.com/posts/2017/definindo-apis-com-o-api-blueprint/</link>
      <pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/definindo-apis-com-o-api-blueprint/</guid>
      <description>Definindo APIs com o API Blueprint Uma das melhores decisões que tomamos na Coderockr foi adotarmos a abordagem “API First” para todos os projetos que iniciamos, desde 2010. Mas nos últimos meses percebemos uma necessidade: melhorar o processo de definição e documentação das APIs.
Já usávamos outras abordagens, mas a maioria delas envolvia documentar a API no próprio código, usando annotations. Esta abordagem funciona, mas tem alguns problemas, principalmente quando a documentação precisa ser alterada por alguém de negócios.</description>
    </item>
    
    <item>
      <title>Ambientes por Branch com OpenShift Next Gen Usando GitHub</title>
      <link>https://blog.coderockr.com/posts/2017/ambientes-por-branch-com-openshift-next-gen-usando-github/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/ambientes-por-branch-com-openshift-next-gen-usando-github/</guid>
      <description>Esta postagem é uma continuação da “Ambientes por Branch com OpenShift Next Gen”, a introdução do problema esta lá e também mostro como implementar o processo de deploy usando o GitLab nele, se não viu da uma conferida, vale o investimento
Como prometi na outra postagem, vamos criar um processo de deploy de ambientes por branch usando o GitHub.
No caso do GitHub, ele cobre “apenas” a parte de repositório de fontes, ele em si não tem integração direta com o Kubernetes/OpenShift, mas possui uma grande gama de opções no que diz respeito de ferramentas de CI e CD.</description>
    </item>
    
    <item>
      <title>Como Lidar com Senhas Inseguras em Projetos Legados</title>
      <link>https://blog.coderockr.com/posts/2017/como-lidar-com-senhas-inseguras-em-projetos-legados/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/como-lidar-com-senhas-inseguras-em-projetos-legados/</guid>
      <description>Aqui na Coderockr nós eventualmente nos deparamos com sistemas legados e muitas vezes inseguros. Um dos problemas mais comuns é a utilização de funções hash como MD5, SHA1, SHA-256 em senhas. O uso dessas funções apresenta alguns riscos que as aplicações não deveriam estar correndo, mas antes de abordar as soluções, vamos ver porque o uso deses algoritmos de hash representam um risco de segurança.
Por que funções hash não devem ser usadas em senhas?</description>
    </item>
    
    <item>
      <title>Integração Contínua Usando o Drone</title>
      <link>https://blog.coderockr.com/posts/2017/integracao-continua-usando-o-drone/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/integracao-continua-usando-o-drone/</guid>
      <description>Integração contínua e deploy contínuo são dois pontos muito importantes no “Coderockr Way”, o processo de desenvolvimento que usamos na Coderockr. Neste post vou falar sobre uma nova ferramenta que estamos avaliando, o Drone.
O Drone é uma solução open source, desenvolvida em Go e baseada fortemente no uso de containers Docker. Ele é formado por três componentes principais:
 Server: faz a orquestração dos builds, ouvindo eventos em repositórios hospedados no Github, Gitlab ou Bitbucket e gerenciando a execução usando os agentes.</description>
    </item>
    
    <item>
      <title>Ambientes por Branch com OpenShift Next Gen Usando Gitlab</title>
      <link>https://blog.coderockr.com/posts/2017/ambientes-por-branch-com-openshift-next-gen-usando-gitlab/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/ambientes-por-branch-com-openshift-next-gen-usando-gitlab/</guid>
      <description>Hoje na Coderockr utilizamos Pull Requests e Code Reviews como uma ferramenta de qualidade nos nossos desenvolvimentos, e tem garantido resultados nesse sentido.
Mas mesmo com esse processo eventualmente temos de lidar com alguns problemas como, por exemplo, funções que interferem umas nas outras depois de aprovadas, permitir que os Testers possam avaliar as melhorias, e garantir que todos as mudanças feitas na branch principal podem ser enviadas para produção.</description>
    </item>
    
    <item>
      <title>Um Ambiente Simples Usando Kubernetes e OpenShift Next Gen — Parte 4</title>
      <link>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-4/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-4/</guid>
      <description>Este post é a quarta parte de uma série sobre o básico necessário para usar o Kubernetes, caso você não tenha lido o post anterior recomendo lê-lo e depois voltar aqui para não ficar perdido.
 Parte 1 — Conceitos Básicos: clique aqui
 Parte 2 — Construindo o Ambiente: clique aqui
 Parte 3 — Volumes Persistentes: clique aqui
  Como citei no post anterior ainda existe um ponto de desconforto no ambiente, que é o fato das senhas e usuários estarem expostos diretamente nas configurações.</description>
    </item>
    
    <item>
      <title>Um Ambiente Simples Usando Kubernetes e OpenShift Next Gen — Parte 3</title>
      <link>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/</guid>
      <description>Este post é a terceira parte de uma série sobre o básico necessário para usar o Kubernetes, caso você não tenha lido o post anterior recomendo lê-lo e depois voltar aqui para não ficar perdido.
 Parte 1 — Conceitos Básicos: clique aqui
 Parte 2 — Construindo o Ambiente: clique aqui
 Parte 4 — Segredos: clique aqui
  Como comentei no post anterior existem alguns problemas no ambiente que construí, e o princípial deles é que os Pods não totalmente efêmeros, ou seja, se eu adicionar novos dados nele, no momento que o Pod fosse destruído os dados iriam junto e sem backup !</description>
    </item>
    
    <item>
      <title>Um Ambiente Simples Usando Kubernetes e OpenShift Next Gen — Parte 2</title>
      <link>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2/</link>
      <pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2/</guid>
      <description>Este post é parte de uma série sobre o básico necessário para usar o Kubernetes, caso você não tenha lido os post anteriores recomendo lê-los e depois voltar aqui para não ficar perdido.
 Parte 1 — Conceitos Básicos: clique aqui
 Parte 3 — Volumes Persistentes: clique aqui
 Parte 4 — Segredos: clique aqui
  Conhecendo os componentes básicos explicados no post anterior posso preparar a aplicação que mostrei para o Kubernetes.</description>
    </item>
    
    <item>
      <title>Um Ambiente Simples Usando Kubernetes e OpenShift Next Gen — Parte 1</title>
      <link>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/</guid>
      <description>Como parte das minhas metas dentro da Coderockr está a construção de um cluster usando algumas das ferramentas de orquestração de contêineres que existem no mercado; como o Docker Swarm, Kubernetes, Apache Mesos, etc.
Optei pelo Kubernetes no momento, tanto pelo pedigree, criado pelo Google e mantido pela Cloud Native Computing Foundation; quanto pela oferta de grandes clouds como a Red Hat, Azure e Google.
Quando estava avaliando as opções disponíveis, o Jean Carlo Machado (colega da CompuFácil), me sugeriu usar o **OpenShift Next Gen**, a plataforma da Red Hat para Kubernetes, que esta em Developer Preview permitindo que você se cadastre para testar a ferramenta deles por 30 dias.</description>
    </item>
    
    <item>
      <title>Simplificando o Setup de Projetos no GitHub</title>
      <link>https://blog.coderockr.com/posts/2017/simplificando-o-setup-de-projetos-no-github/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/simplificando-o-setup-de-projetos-no-github/</guid>
      <description>Na Coderockr iniciamos e assumimos vários projetos, sejam para clientes que nos contratam ou para ações internas, e normalmente o GitHub acaba sendo a ferramenta escolhida para eles.
E ao longo dos anos acabamos definindo uma estrutura para controlarmos as nossas issues, usando as seguintes labels:
Conjunto de labels utilizadas no Coderockr Way
É um conjunto bem simples, mas que deixa bem claro as etapas, prioridades, tipos e estados das tarefas, de forma que fica bem fácil de acompanhá-las.</description>
    </item>
    
    <item>
      <title>Usando AWS API Gateway e AWS Lambda</title>
      <link>https://blog.coderockr.com/posts/2017/usando-aws-api-gateway-e-aws-lambda/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2017/usando-aws-api-gateway-e-aws-lambda/</guid>
      <description>Recentemente lançamos uma nova versão do site da Coderockr (já viu? Está lindão!) e nosso desenvolvedor/designer apresentou uma ótima ideia: criarmos um formulário de contato mais inteligente, onde o interessado pode nos fornecer informações mais completas já no primeiro momento, acelerando nosso processo de negociação.
Como usamos o CRM da HubSpot para gerenciar nossos contatos com clientes, rapidamente a ideia evoluiu para usarmos a API e integrarmos o formulário com o CRM.</description>
    </item>
    
    <item>
      <title>Por que o Planrockr é uma Single Page Application?</title>
      <link>https://blog.coderockr.com/posts/2016/por-que-o-planrockr-e-uma-single-page-application/</link>
      <pubDate>Wed, 02 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/por-que-o-planrockr-e-uma-single-page-application/</guid>
      <description>Há uns dias atrás, foi feita uma pergunta para a equipe do Planrockr no twitter:
@eminetto qual foi o fator determinante pro Planrockr ser uma SPA e não uma app tradicional? =)
&amp;mdash; Pedro Costa (@plcosta) October 14, 2016  
Esse é um assunto interessante a ser abordado: Quando uma aplicação deve ou não ser uma SPA? Nesse artigo não pretendo fazer menção a nenhum framework em específico, mas nos manter focados nas vantagens e desvantagens deste tipo de arquitetura.</description>
    </item>
    
    <item>
      <title>Gerando Code Coverage com PHPUnit e phpgbg</title>
      <link>https://blog.coderockr.com/posts/2016/gerando-code-coverage-com-phpunit-e-phpgbd/</link>
      <pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/gerando-code-coverage-com-phpunit-e-phpgbd/</guid>
      <description>Em um post anterior eu mostrei alguns truques para identificar testes que estão demorando muito para serem executados. Neste texto vou mostrar uma forma de melhorar a performance da geração do relatório de cobertura de códigos usando o PHPUnit.
É possível incluir configurações no arquivo phpunit.xml para que sejam gerados relatórios relativos aos testes que estão sendo executados. Por exemplo:
 Desta forma será criado o diretório tests/_reports com uma série de informações úteis.</description>
    </item>
    
    <item>
      <title>Integrando Mixpanel com React</title>
      <link>https://blog.coderockr.com/posts/2016/integrando-mixpanel-com-react/</link>
      <pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/integrando-mixpanel-com-react/</guid>
      <description>Recentemente lançamos a nova interface do Planrockr, feita em ReactJS. Nesse produto nós estamos utilizando o MixPanel para fazer tracking de ações do usuário. Anteriormente nós fazíamos o tracking apenas pelo backend, já que a interface era experimental e sabíamos que as chances eram grandes de o código dela ser descartado.
Para essa nova versão do Planrockr, nós decidimos levar o tracking de alguns eventos para o frontend, já que no backend nós não tínhamos acesso a algumas informações, como: Browser, localização, resolução de tela e etc…</description>
    </item>
    
    <item>
      <title>Como Usamos o Slack na Coderockr</title>
      <link>https://blog.coderockr.com/posts/2016/como-usamos-o-slack-na-coderockr/</link>
      <pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/como-usamos-o-slack-na-coderockr/</guid>
      <description>Dentre os valores da Coderockr estão dois pontos importantes: cooperação e transparência. Como somos uma empresa que desenvolve software nada mais esperado do que usarmos aplicativos para ajudar nestes objetivos. E hoje a principal ferramenta para isso é o Slack, que rapidamente tornou-se o coração de muitas empresas
Nós usamos o Slack como o nosso canal de comunicação, tanto entre as equipes quanto com os clientes. Cada projeto recebe um canal específico, como no exemplo abaixo:</description>
    </item>
    
    <item>
      <title>Developer Experience na Prática</title>
      <link>https://blog.coderockr.com/posts/2016/developer-experience-na-pratica/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/developer-experience-na-pratica/</guid>
      <description>No post anterior eu falei sobre a ideia do DX e como implementar algo similar em nossas empresas. Neste post quero comentar um exemplo prático comparando duas empresas similares.
Quando o Stripe foi lançado nos EUA o mercado de gateways de pagamento já estava consolidado, com grandes players como o Paypal. Nestes cenários a única forma de uma nova empresa se destacar é criando uma “vantagem competitiva” em relação aos outros concorrentes.</description>
    </item>
    
    <item>
      <title>Tratamento de Erros em Go</title>
      <link>https://blog.coderockr.com/posts/2016/tratamento-de-erros-em-go/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/tratamento-de-erros-em-go/</guid>
      <description>Um dos primeiros pontos que causam estranheza para quem está começando em Go é a forma como os erros são tratados, principalmente quando viemos de outras linguagens orientadas a objetos. Em Go os erros são “first class citizens”, ou seja, eles não são ocultos ou delegados e são considerados parte importante do código.
Hoje passei por uma situação onde isso fez diferença. Revisando/debugando o código em PHP (alterado do original):</description>
    </item>
    
    <item>
      <title>DX — Developer Experience</title>
      <link>https://blog.coderockr.com/posts/2016/dx-developer-experience/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/dx-developer-experience/</guid>
      <description>Depois de algumas cervejas e várias horas de conversa (ou teriam sido várias cervejas e algumas horas de conversa?), eis que o Guilherme Siquinelli cunha o termo que dá título a este post.
E este termo faz muito sentido. Nos últimos anos a disciplina de UX — User Experience — provou-se muito importante, desde projetos de aplicativos até e-commerce e sistemas bancários. Tornar um sistema fácil e amigável aos seus usuários é um grande passo para o seu sucesso.</description>
    </item>
    
    <item>
      <title>Estimativa Baseada em Evidências</title>
      <link>https://blog.coderockr.com/posts/2016/estimativa-baseada-em-evidencias/</link>
      <pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/estimativa-baseada-em-evidencias/</guid>
      <description>As pessoas, salvo alguns místicos, não são muito boas em prever o futuro.
https://www.flickr.com/photos/pasukaru76/3998273279/
Portanto é bem provável que as suas estimativas de entregas de tarefas e projetos não sejam tão precisas quanto seu cliente espera, certo? Felizmente temos outros recursos a nossa disposição para suprir essa nossa deficiência: fatos, números e computadores rápidos o suficiente para processá-las.
Vamos fazer uma simples &amp;ldquo;conta de padaria&amp;rdquo; e imaginar o seguinte cenário:</description>
    </item>
    
    <item>
      <title>Gerando documentação de APIs</title>
      <link>https://blog.coderockr.com/posts/2016/gerando-documentacao-de-apis/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/gerando-documentacao-de-apis/</guid>
      <description>Uma das melhores decisões técnicas que tomei na minha carreira foi investir pesado nas arquiteturas baseadas em serviços. Meu primeiro post sobre isso data de 2011 e desde então esta decisão só se provou um acerto.
Uma das tarefas mais importantes, e chatas, é manter a documentação das APIs sempre atualizadas pois elas são consumidas por cada vez mais camadas: frontend, mobile, outros serviços e sistemas. Existem várias ferramentas para esta tarefa, sendo uma das mais completas, e complexas, o Swagger, além de alguns serviços pagos.</description>
    </item>
    
    <item>
      <title>Por que Go?</title>
      <link>https://blog.coderockr.com/posts/2016/por-que-go/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/por-que-go/</guid>
      <description>A melhor ferramenta para cada necessidade
Nestes quase 20 anos de carreira como desenvolvedor eu já trabalhei com várias linguagens de programação, desde C, passando por Cobol, Java, Python e PHP, que tornou-se minha principal ferramenta.
Uma das coisas que aprendi nesse processo foi sempre tentar encontrar a melhor ferramenta para cada situação e evitar cair na máxima:
 Se a única ferramenta que você tem é um martelo, para você tudo começa a se parecer com um prego.</description>
    </item>
    
    <item>
      <title>Melhorando a Performance do PHPUnit</title>
      <link>https://blog.coderockr.com/posts/2016/melhorando-a-performance-do-phpunit/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/melhorando-a-performance-do-phpunit/</guid>
      <description>Em pleno 2016 acho que não preciso gastar caracteres comentando a importância dos TDD no desenvolvimento de software, porque você já está escrevendo testes, certo?
O que eu vou comentar aqui é a importância deles executarem o mais rápido possível, porque se o processo de execução de testes for algo lento a tendência é o desenvolvedor escrever menos, ou executá-los esporadicamente.
Mas como identificar quais testes estão demorando mais e como melhorar a sua performance?</description>
    </item>
    
    <item>
      <title>O Fim dos Frameworks Full Stack</title>
      <link>https://blog.coderockr.com/posts/2016/o-fim-dos-frameworks-full-stack/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/o-fim-dos-frameworks-full-stack/</guid>
      <description>Venho acompanhando de perto a evolução dos frameworks PHP desde meados de 2004 e me parece que todos estão caminhando para uma abordagem cada vez mais focada ao conceito de micro-frameworks.
Um pouco de história… Nos primórdios havia o caos, e então veio o Ruby on Rails… E as outras linguagens viram que era legal e criaram suas versões do “framework MVC perfeito”, como o Zend Framework, Symfony, CakePHP, Code Igniter, etc.</description>
    </item>
    
    <item>
      <title>Relógios, Carros e Teste de Software</title>
      <link>https://blog.coderockr.com/posts/2016/relogios-carros-e-teste-de-software/</link>
      <pubDate>Thu, 07 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2016/relogios-carros-e-teste-de-software/</guid>
      <description>Recentemente comprei um relógio de pulso. Usar um relógio analógico em 2016 é basicamente uma decisão de estética e não de funcionalidade pois estamos rodeados de relógios digitais, como por exemplo, no painel do meu carro.
O interessante é que o relógio do meu carro vive atrasando, enquanto que o relógio de pulso nunca apresentou esse problema, apesar do relógio ter custado muito menos do que o veículo. O ponto é que para o relógio a funcionalidade “mostrar as horas” é a coisa mais importante, enquanto que para o carro isso é um extra.</description>
    </item>
    
    <item>
      <title>Os 12 Fatores: Uma Metodologia para Criação de Projetos SaaS</title>
      <link>https://blog.coderockr.com/posts/2015/os-12-fatores-uma-metodologia-para-criacao-de-projetos-saas/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.coderockr.com/posts/2015/os-12-fatores-uma-metodologia-para-criacao-de-projetos-saas/</guid>
      <description>Todo desenvolvedor já deve ter ouvido falar do Heroku, plataforma de cloud computing que revolucionou o desenvolvimento, ajudou a criar o movimento “devops” e que foi vendida por diversos milhares de dólares para a Salesforce. Se tem algo que eles tem muita experiência é na criação e suporte de aplicativos SaaS (software-as-a-service), principalmente aplicativos web.
Eles usaram toda essa experiência para criar o 12factor que é uma espécie de “manifesto” com os 12 fatores que uma aplicação deveria seguir para ter sucesso nesse formato.</description>
    </item>
    
  </channel>
</rss>